{:duct.profile/base
 {:duct.core/project-ns isomorphic-clojure-webapp

  :duct.middleware.web/defaults {:cookie true
                                 :session {:flash true
                                           :cookie-attrs {:http-only true
                                                          ;;:same-site :strict
                                                          :max-age 3600}}
                                 :params {:urlencoded true
                                          :multipart true}
                                 :responses {:absolute-redirects true}}

  :duct.middleware.buddy/authentication
  {:backend :jws
   :secret "SECRET-KEY" #_#duct/env "SECRET-KEY"}

  :duct.router/reitit
  {:routes [["/" {:get #ig/ref :isomorphic-clojure-webapp.api.handler.app/index}]
            ["/ui"
             ["/products"
              ["" #ig/ref :isomorphic-clojure-webapp.ui.handler.products/list]
              ["/create" {:get #ig/ref :isomorphic-clojure-webapp.ui.handler.products/create
                          :post #ig/ref :isomorphic-clojure-webapp.ui.handler.products/create-post}]
              ["/detail/:product-id" #ig/ref :isomorphic-clojure-webapp.ui.handler.products/detail]
              ["/edit/:product-id" {:get #ig/ref :isomorphic-clojure-webapp.ui.handler.products/edit
                                    :post #ig/ref :isomorphic-clojure-webapp.ui.handler.products/edit-post}]
              ["/delete/:product-id" {:get #ig/ref :isomorphic-clojure-webapp.ui.handler.products/delete
                                      :post #ig/ref :isomorphic-clojure-webapp.ui.handler.products/delete-post}]]]

            ["/api" {:middleware [#ig/ref :duct.middleware.buddy/authentication]}
             ["/health" {:get {:handler #ig/ref :isomorphic-clojure-webapp.api.handler.app/health}}]
             ["/health-auth" {:get {:handler #ig/ref :isomorphic-clojure-webapp.api.handler.app/health
                                    :middleware [#ig/ref :isomorphic-clojure-webapp.api.auth/wrap-user-only]}}]
             ["/users"
              ["" {:get #ig/ref :isomorphic-clojure-webapp.api.handler.users/list
                   :post #ig/ref :isomorphic-clojure-webapp.api.handler.users/create}]
              ["/:user-id"
               ["" {:get  #ig/ref :isomorphic-clojure-webapp.api.handler.users/fetch
                    :put {:parameters {:body :isomorphic-clojure-webapp.spec.users/put-body}
                          :handler #ig/ref :isomorphic-clojure-webapp.api.handler.users/update}
                    :delete {:handler #ig/ref :isomorphic-clojure-webapp.api.handler.users/delete}}]
               ["/reviews" {:get #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/list}]]]
             ["/login" {:post {:parameters {:body :isomorphic-clojure-webapp.spec.users/login-body}
                               :handler #ig/ref :isomorphic-clojure-webapp.api.handler.users/login}}]
             ["/signin" {:post {:parameters {:body :isomorphic-clojure-webapp.spec.users/signin-body}
                                :handler #ig/ref :isomorphic-clojure-webapp.api.handler.users/signin}}]

             ["/products"
              ["" {:get  {:parameters {:query :isomorphic-clojure-webapp.spec.products/query}
                          :handler #ig/ref :isomorphic-clojure-webapp.api.handler.products/list}
                   :post {:parameters {:body :isomorphic-clojure-webapp.spec.products/post-body}
                          :handler #ig/ref :isomorphic-clojure-webapp.api.handler.products/create}}]
              ["/:product-id" {:parameters {:path :isomorphic-clojure-webapp.spec.products/product-path}}
               ["" {:get {:handler #ig/ref :isomorphic-clojure-webapp.api.handler.products/fetch}
                    :put {:parameters {:body :isomorphic-clojure-webapp.spec.products/put-body}
                          :handler #ig/ref :isomorphic-clojure-webapp.api.handler.products/update}
                    :delete {:handler #ig/ref :isomorphic-clojure-webapp.api.handler.products/delete}}]
               ["/reviews" {#_:post
                            :get #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/list}]]]

             ["/reviews"
              ["" {:get #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/list
                   :post #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/create}]
              ["/:review-id"
               ["" {:get #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/fetch
                    :put #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/update
                    :delete #ig/ref :isomorphic-clojure-webapp.api.handler.reviews/delete}]]]]]}

  :isomorphic-clojure-webapp.ui.handler.products/list {}
  :isomorphic-clojure-webapp.ui.handler.products/detail {}
  :isomorphic-clojure-webapp.ui.handler.products/create {}
  :isomorphic-clojure-webapp.ui.handler.products/create-post {}
  :isomorphic-clojure-webapp.ui.handler.products/edit {}
  :isomorphic-clojure-webapp.ui.handler.products/edit-post {}
  :isomorphic-clojure-webapp.ui.handler.products/delete {}
  :isomorphic-clojure-webapp.ui.handler.products/delete-post {}


  :isomorphic-clojure-webapp.api.handler.app/index {}
  :isomorphic-clojure-webapp.api.handler.app/health {}
  :isomorphic-clojure-webapp.api.auth/wrap-user-only {}
  :isomorphic-clojure-webapp.api.handler.users/list {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/create {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/fetch {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/update {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/delete {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/login {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.users/signin {:db #ig/ref :duct.database.sql/hikaricp}

  :isomorphic-clojure-webapp.api.handler.products/list {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.products/create {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.products/fetch {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.products/update {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.products/delete {:db #ig/ref :duct.database.sql/hikaricp}

  :isomorphic-clojure-webapp.api.handler.reviews/list {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.reviews/create {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.reviews/fetch {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.reviews/update {:db #ig/ref :duct.database.sql/hikaricp}
  :isomorphic-clojure-webapp.api.handler.reviews/delete {:db #ig/ref :duct.database.sql/hikaricp}

  :duct.migrator/ragtime {:migrations [#ig/ref :review-site.migration/create-users-table
                                       #ig/ref :review-site.migration/create-products-table]}

  [:duct.migrator.ragtime/sql :review-site.migration/create-users-table]
  {:up ["CREATE TABLE users (id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
                           name TEXT NOT NULL,
                           email TEXT,
                           password TEXT,
                           created TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                           updated TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP);"]
   :down ["DROP TABLE users;"]}

  [:duct.migrator.ragtime/sql :review-site.migration/create-products-table]
  {:up ["CREATE TABLE products (id UUID PRIMARY KEY DEFAULT gen_random_uuid (),
                           name TEXT NOT NULL,
                           description TEXT,
                           created TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                           updated TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP);"]
   :down ["DROP TABLE products;"]}}

 :duct.profile/dev   #duct/include "dev"
 :duct.profile/local #duct/include "local"
 :duct.profile/test  #duct/include "test.edn"
 :duct.profile/prod  {}

 :duct.module/logging {}
 :duct.module.web/api
 {}
 :duct.module/sql
 {}}
